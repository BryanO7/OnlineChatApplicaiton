# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chat_pb2 as chat__pb2


class ChatServiceStub(object):
    """El servicio Chat define los métodos gRPC disponibles.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterClient = channel.unary_unary(
                '/chat.ChatService/RegisterClient',
                request_serializer=chat__pb2.ClientRequest.SerializeToString,
                response_deserializer=chat__pb2.ClientResponse.FromString,
                )
        self.GetClientAddress = channel.unary_unary(
                '/chat.ChatService/GetClientAddress',
                request_serializer=chat__pb2.ClientRequest.SerializeToString,
                response_deserializer=chat__pb2.ClientResponse.FromString,
                )
        self.SubscribeGroupChat = channel.unary_unary(
                '/chat.ChatService/SubscribeGroupChat',
                request_serializer=chat__pb2.ChatRequest.SerializeToString,
                response_deserializer=chat__pb2.ChatResponse.FromString,
                )
        self.DiscoverChats = channel.unary_unary(
                '/chat.ChatService/DiscoverChats',
                request_serializer=chat__pb2.Empty.SerializeToString,
                response_deserializer=chat__pb2.ChatListResponse.FromString,
                )


class ChatServiceServicer(object):
    """El servicio Chat define los métodos gRPC disponibles.
    """

    def RegisterClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClientAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeGroupChat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiscoverChats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterClient': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterClient,
                    request_deserializer=chat__pb2.ClientRequest.FromString,
                    response_serializer=chat__pb2.ClientResponse.SerializeToString,
            ),
            'GetClientAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClientAddress,
                    request_deserializer=chat__pb2.ClientRequest.FromString,
                    response_serializer=chat__pb2.ClientResponse.SerializeToString,
            ),
            'SubscribeGroupChat': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeGroupChat,
                    request_deserializer=chat__pb2.ChatRequest.FromString,
                    response_serializer=chat__pb2.ChatResponse.SerializeToString,
            ),
            'DiscoverChats': grpc.unary_unary_rpc_method_handler(
                    servicer.DiscoverChats,
                    request_deserializer=chat__pb2.Empty.FromString,
                    response_serializer=chat__pb2.ChatListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chat.ChatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChatService(object):
    """El servicio Chat define los métodos gRPC disponibles.
    """

    @staticmethod
    def RegisterClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.ChatService/RegisterClient',
            chat__pb2.ClientRequest.SerializeToString,
            chat__pb2.ClientResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetClientAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.ChatService/GetClientAddress',
            chat__pb2.ClientRequest.SerializeToString,
            chat__pb2.ClientResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeGroupChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.ChatService/SubscribeGroupChat',
            chat__pb2.ChatRequest.SerializeToString,
            chat__pb2.ChatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DiscoverChats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.ChatService/DiscoverChats',
            chat__pb2.Empty.SerializeToString,
            chat__pb2.ChatListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
