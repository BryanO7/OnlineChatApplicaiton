# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import private_chat_pb2 as private__chat__pb2


class PrivateChatServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EstablishConnection = channel.unary_unary(
                '/private_chat.PrivateChatService/EstablishConnection',
                request_serializer=private__chat__pb2.ConnectionRequest.SerializeToString,
                response_deserializer=private__chat__pb2.ConnectionResponse.FromString,
                )
        self.SendMessage = channel.unary_unary(
                '/private_chat.PrivateChatService/SendMessage',
                request_serializer=private__chat__pb2.MessageRequest.SerializeToString,
                response_deserializer=private__chat__pb2.MessageResponse.FromString,
                )
        self.ReceiveMessages = channel.unary_stream(
                '/private_chat.PrivateChatService/ReceiveMessages',
                request_serializer=private__chat__pb2.Empty.SerializeToString,
                response_deserializer=private__chat__pb2.MessageResponse.FromString,
                )


class PrivateChatServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def EstablishConnection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PrivateChatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EstablishConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.EstablishConnection,
                    request_deserializer=private__chat__pb2.ConnectionRequest.FromString,
                    response_serializer=private__chat__pb2.ConnectionResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=private__chat__pb2.MessageRequest.FromString,
                    response_serializer=private__chat__pb2.MessageResponse.SerializeToString,
            ),
            'ReceiveMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.ReceiveMessages,
                    request_deserializer=private__chat__pb2.Empty.FromString,
                    response_serializer=private__chat__pb2.MessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'private_chat.PrivateChatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PrivateChatService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def EstablishConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/private_chat.PrivateChatService/EstablishConnection',
            private__chat__pb2.ConnectionRequest.SerializeToString,
            private__chat__pb2.ConnectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/private_chat.PrivateChatService/SendMessage',
            private__chat__pb2.MessageRequest.SerializeToString,
            private__chat__pb2.MessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/private_chat.PrivateChatService/ReceiveMessages',
            private__chat__pb2.Empty.SerializeToString,
            private__chat__pb2.MessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
